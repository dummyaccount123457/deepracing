/* deepf1_gsoapH.h
   Generated by gSOAP 2.8.61 for car_data.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef deepf1_gsoapH_H
#define deepf1_gsoapH_H
#include "deepf1_gsoap/deepf1_gsoapStub.h"

namespace deepf1_gsoap {
#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 deepf1_gsoap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 deepf1_gsoap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 deepf1_gsoap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 deepf1_gsoap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_deepf1_gsoap_byte_DEFINED
#define SOAP_TYPE_deepf1_gsoap_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || deepf1_gsoap::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || deepf1_gsoap::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || deepf1_gsoap::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || deepf1_gsoap::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || deepf1_gsoap::soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (deepf1_gsoap::soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_deepf1_gsoap_int_DEFINED
#define SOAP_TYPE_deepf1_gsoap_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || deepf1_gsoap::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || deepf1_gsoap::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || deepf1_gsoap::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || deepf1_gsoap::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || deepf1_gsoap::soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (deepf1_gsoap::soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_deepf1_gsoap_float_DEFINED
#define SOAP_TYPE_deepf1_gsoap_float_DEFINED

inline void soap_default_float(struct soap *soap, float *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);

SOAP_FMAC3 float * SOAP_FMAC4 soap_new_float(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

inline int soap_write_float(struct soap *soap, float const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || deepf1_gsoap::soap_put_float(soap, p, "float", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || deepf1_gsoap::soap_put_float(soap, p, "float", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || deepf1_gsoap::soap_put_float(soap, p, "float", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

inline int soap_read_float(struct soap *soap, float *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || deepf1_gsoap::soap_get_float(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_float(struct soap *soap, const char *URL, float *p)
{
	if (soap_GET(soap, URL, NULL) || deepf1_gsoap::soap_read_float(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_float(struct soap *soap, float *p)
{
	if (deepf1_gsoap::soap_read_float(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_deepf1_gsoap_std__string_DEFINED
#define SOAP_TYPE_deepf1_gsoap_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = deepf1_gsoap::soap_new_std__string(soap);
	if (_p)
	{	deepf1_gsoap::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = deepf1_gsoap::soap_new_std__string(soap);
	if (_p)
	{	deepf1_gsoap::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || deepf1_gsoap::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || deepf1_gsoap::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || deepf1_gsoap::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || deepf1_gsoap::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || deepf1_gsoap::soap_read_std__string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (deepf1_gsoap::soap_read_std__string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_deepf1_gsoap_ground_truth_sample_DEFINED
#define SOAP_TYPE_deepf1_gsoap_ground_truth_sample_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ground_truth_sample(struct soap*, const char*, int, const ground_truth_sample *, const char*);
SOAP_FMAC3 ground_truth_sample * SOAP_FMAC4 soap_in_ground_truth_sample(struct soap*, const char*, ground_truth_sample *, const char*);
SOAP_FMAC1 ground_truth_sample * SOAP_FMAC2 soap_instantiate_ground_truth_sample(struct soap*, int, const char*, const char*, size_t*);

inline ground_truth_sample * soap_new_ground_truth_sample(struct soap *soap, int n = -1)
{
	return soap_instantiate_ground_truth_sample(soap, n, NULL, NULL, NULL);
}

inline ground_truth_sample * soap_new_req_ground_truth_sample(
	struct soap *soap,
	const UDPPacket& sample,
	const std::string& image_file)
{
	ground_truth_sample *_p = deepf1_gsoap::soap_new_ground_truth_sample(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ground_truth_sample::sample = sample;
		_p->ground_truth_sample::image_file = image_file;
	}
	return _p;
}

inline ground_truth_sample * soap_new_set_ground_truth_sample(
	struct soap *soap,
	const UDPPacket& sample,
	const std::string& image_file)
{
	ground_truth_sample *_p = deepf1_gsoap::soap_new_ground_truth_sample(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ground_truth_sample::sample = sample;
		_p->ground_truth_sample::image_file = image_file;
	}
	return _p;
}

inline int soap_write_ground_truth_sample(struct soap *soap, ground_truth_sample const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ground-truth-sample", p->soap_type() == SOAP_TYPE_deepf1_gsoap_ground_truth_sample ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ground_truth_sample(struct soap *soap, const char *URL, ground_truth_sample const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ground-truth-sample", p->soap_type() == SOAP_TYPE_deepf1_gsoap_ground_truth_sample ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ground_truth_sample(struct soap *soap, const char *URL, ground_truth_sample const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ground-truth-sample", p->soap_type() == SOAP_TYPE_deepf1_gsoap_ground_truth_sample ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ground_truth_sample * SOAP_FMAC4 soap_get_ground_truth_sample(struct soap*, ground_truth_sample *, const char*, const char*);

inline int soap_read_ground_truth_sample(struct soap *soap, ground_truth_sample *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || deepf1_gsoap::soap_get_ground_truth_sample(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ground_truth_sample(struct soap *soap, const char *URL, ground_truth_sample *p)
{
	if (soap_GET(soap, URL, NULL) || deepf1_gsoap::soap_read_ground_truth_sample(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ground_truth_sample(struct soap *soap, ground_truth_sample *p)
{
	if (deepf1_gsoap::soap_read_ground_truth_sample(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_deepf1_gsoap_UDPPacket_DEFINED
#define SOAP_TYPE_deepf1_gsoap_UDPPacket_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_UDPPacket(struct soap*, const char*, int, const UDPPacket *, const char*);
SOAP_FMAC3 UDPPacket * SOAP_FMAC4 soap_in_UDPPacket(struct soap*, const char*, UDPPacket *, const char*);
SOAP_FMAC1 UDPPacket * SOAP_FMAC2 soap_instantiate_UDPPacket(struct soap*, int, const char*, const char*, size_t*);

inline UDPPacket * soap_new_UDPPacket(struct soap *soap, int n = -1)
{
	return soap_instantiate_UDPPacket(soap, n, NULL, NULL, NULL);
}

inline UDPPacket * soap_new_req_UDPPacket(
	struct soap *soap,
	float m_time,
	float m_lapTime,
	float m_lapDistance,
	float m_totalDistance,
	float m_x,
	float m_y,
	float m_z,
	float m_speed,
	float m_xv,
	float m_yv,
	float m_zv,
	float m_xr,
	float m_yr,
	float m_zr,
	float m_xd,
	float m_yd,
	float m_zd,
	float const*m_susp_pos,
	float const*m_susp_vel,
	float const*m_wheel_speed,
	float m_throttle,
	float m_steer,
	float m_brake,
	float m_clutch,
	float m_gear,
	float m_gforce_lat,
	float m_gforce_lon,
	float m_lap,
	float m_engineRate,
	float m_sli_pro_native_support,
	float m_car_position,
	float m_kers_level,
	float m_kers_max_level,
	float m_drs,
	float m_traction_control,
	float m_anti_lock_brakes,
	float m_fuel_in_tank,
	float m_fuel_capacity,
	float m_in_pits,
	float m_sector,
	float m_sector1_time,
	float m_sector2_time,
	float const*m_brakes_temp,
	float const*m_tyres_pressure,
	float m_team_info,
	float m_total_laps,
	float m_track_size,
	float m_last_lap_time,
	float m_max_rpm,
	float m_idle_rpm,
	float m_max_gears,
	float m_sessionType,
	float m_drsAllowed,
	float m_track_number,
	float m_vehicleFIAFlags,
	float m_era,
	float m_engine_temperature,
	float m_gforce_vert,
	float m_ang_vel_x,
	float m_ang_vel_y,
	float m_ang_vel_z,
	char const*m_tyres_temperature,
	char const*m_tyres_wear,
	char m_tyre_compound,
	char m_front_brake_bias,
	char m_fuel_mix,
	char m_currentLapInvalid,
	char const*m_tyres_damage,
	char m_front_left_wing_damage,
	char m_front_right_wing_damage,
	char m_rear_wing_damage,
	char m_engine_damage,
	char m_gear_box_damage,
	char m_exhaust_damage,
	char m_pit_limiter_status,
	char m_pit_speed_limit,
	float m_session_time_left,
	char m_rev_lights_percent,
	char m_is_spectating,
	char m_spectator_car_index,
	char m_num_cars,
	char m_player_car_index,
	CarUDPData const*m_car_data,
	float m_yaw,
	float m_pitch,
	float m_roll,
	float m_x_local_velocity,
	float m_y_local_velocity,
	float m_z_local_velocity,
	float const*m_susp_acceleration,
	float m_ang_acc_x,
	float m_ang_acc_y,
	float m_ang_acc_z)
{
	UDPPacket *_p = deepf1_gsoap::soap_new_UDPPacket(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->UDPPacket::m_time = m_time;
		_p->UDPPacket::m_lapTime = m_lapTime;
		_p->UDPPacket::m_lapDistance = m_lapDistance;
		_p->UDPPacket::m_totalDistance = m_totalDistance;
		_p->UDPPacket::m_x = m_x;
		_p->UDPPacket::m_y = m_y;
		_p->UDPPacket::m_z = m_z;
		_p->UDPPacket::m_speed = m_speed;
		_p->UDPPacket::m_xv = m_xv;
		_p->UDPPacket::m_yv = m_yv;
		_p->UDPPacket::m_zv = m_zv;
		_p->UDPPacket::m_xr = m_xr;
		_p->UDPPacket::m_yr = m_yr;
		_p->UDPPacket::m_zr = m_zr;
		_p->UDPPacket::m_xd = m_xd;
		_p->UDPPacket::m_yd = m_yd;
		_p->UDPPacket::m_zd = m_zd;
		for (int i = 0; i < 4; i++) _p->UDPPacket::m_susp_pos[i] = m_susp_pos[i];
		for (int i = 0; i < 4; i++) _p->UDPPacket::m_susp_vel[i] = m_susp_vel[i];
		for (int i = 0; i < 4; i++) _p->UDPPacket::m_wheel_speed[i] = m_wheel_speed[i];
		_p->UDPPacket::m_throttle = m_throttle;
		_p->UDPPacket::m_steer = m_steer;
		_p->UDPPacket::m_brake = m_brake;
		_p->UDPPacket::m_clutch = m_clutch;
		_p->UDPPacket::m_gear = m_gear;
		_p->UDPPacket::m_gforce_lat = m_gforce_lat;
		_p->UDPPacket::m_gforce_lon = m_gforce_lon;
		_p->UDPPacket::m_lap = m_lap;
		_p->UDPPacket::m_engineRate = m_engineRate;
		_p->UDPPacket::m_sli_pro_native_support = m_sli_pro_native_support;
		_p->UDPPacket::m_car_position = m_car_position;
		_p->UDPPacket::m_kers_level = m_kers_level;
		_p->UDPPacket::m_kers_max_level = m_kers_max_level;
		_p->UDPPacket::m_drs = m_drs;
		_p->UDPPacket::m_traction_control = m_traction_control;
		_p->UDPPacket::m_anti_lock_brakes = m_anti_lock_brakes;
		_p->UDPPacket::m_fuel_in_tank = m_fuel_in_tank;
		_p->UDPPacket::m_fuel_capacity = m_fuel_capacity;
		_p->UDPPacket::m_in_pits = m_in_pits;
		_p->UDPPacket::m_sector = m_sector;
		_p->UDPPacket::m_sector1_time = m_sector1_time;
		_p->UDPPacket::m_sector2_time = m_sector2_time;
		for (int i = 0; i < 4; i++) _p->UDPPacket::m_brakes_temp[i] = m_brakes_temp[i];
		for (int i = 0; i < 4; i++) _p->UDPPacket::m_tyres_pressure[i] = m_tyres_pressure[i];
		_p->UDPPacket::m_team_info = m_team_info;
		_p->UDPPacket::m_total_laps = m_total_laps;
		_p->UDPPacket::m_track_size = m_track_size;
		_p->UDPPacket::m_last_lap_time = m_last_lap_time;
		_p->UDPPacket::m_max_rpm = m_max_rpm;
		_p->UDPPacket::m_idle_rpm = m_idle_rpm;
		_p->UDPPacket::m_max_gears = m_max_gears;
		_p->UDPPacket::m_sessionType = m_sessionType;
		_p->UDPPacket::m_drsAllowed = m_drsAllowed;
		_p->UDPPacket::m_track_number = m_track_number;
		_p->UDPPacket::m_vehicleFIAFlags = m_vehicleFIAFlags;
		_p->UDPPacket::m_era = m_era;
		_p->UDPPacket::m_engine_temperature = m_engine_temperature;
		_p->UDPPacket::m_gforce_vert = m_gforce_vert;
		_p->UDPPacket::m_ang_vel_x = m_ang_vel_x;
		_p->UDPPacket::m_ang_vel_y = m_ang_vel_y;
		_p->UDPPacket::m_ang_vel_z = m_ang_vel_z;
		for (int i = 0; i < 4; i++) _p->UDPPacket::m_tyres_temperature[i] = m_tyres_temperature[i];
		for (int i = 0; i < 4; i++) _p->UDPPacket::m_tyres_wear[i] = m_tyres_wear[i];
		_p->UDPPacket::m_tyre_compound = m_tyre_compound;
		_p->UDPPacket::m_front_brake_bias = m_front_brake_bias;
		_p->UDPPacket::m_fuel_mix = m_fuel_mix;
		_p->UDPPacket::m_currentLapInvalid = m_currentLapInvalid;
		for (int i = 0; i < 4; i++) _p->UDPPacket::m_tyres_damage[i] = m_tyres_damage[i];
		_p->UDPPacket::m_front_left_wing_damage = m_front_left_wing_damage;
		_p->UDPPacket::m_front_right_wing_damage = m_front_right_wing_damage;
		_p->UDPPacket::m_rear_wing_damage = m_rear_wing_damage;
		_p->UDPPacket::m_engine_damage = m_engine_damage;
		_p->UDPPacket::m_gear_box_damage = m_gear_box_damage;
		_p->UDPPacket::m_exhaust_damage = m_exhaust_damage;
		_p->UDPPacket::m_pit_limiter_status = m_pit_limiter_status;
		_p->UDPPacket::m_pit_speed_limit = m_pit_speed_limit;
		_p->UDPPacket::m_session_time_left = m_session_time_left;
		_p->UDPPacket::m_rev_lights_percent = m_rev_lights_percent;
		_p->UDPPacket::m_is_spectating = m_is_spectating;
		_p->UDPPacket::m_spectator_car_index = m_spectator_car_index;
		_p->UDPPacket::m_num_cars = m_num_cars;
		_p->UDPPacket::m_player_car_index = m_player_car_index;
		for (int i = 0; i < 20; i++) _p->UDPPacket::m_car_data[i] = m_car_data[i];
		_p->UDPPacket::m_yaw = m_yaw;
		_p->UDPPacket::m_pitch = m_pitch;
		_p->UDPPacket::m_roll = m_roll;
		_p->UDPPacket::m_x_local_velocity = m_x_local_velocity;
		_p->UDPPacket::m_y_local_velocity = m_y_local_velocity;
		_p->UDPPacket::m_z_local_velocity = m_z_local_velocity;
		for (int i = 0; i < 4; i++) _p->UDPPacket::m_susp_acceleration[i] = m_susp_acceleration[i];
		_p->UDPPacket::m_ang_acc_x = m_ang_acc_x;
		_p->UDPPacket::m_ang_acc_y = m_ang_acc_y;
		_p->UDPPacket::m_ang_acc_z = m_ang_acc_z;
	}
	return _p;
}

inline UDPPacket * soap_new_set_UDPPacket(
	struct soap *soap,
	float m_time,
	float m_lapTime,
	float m_lapDistance,
	float m_totalDistance,
	float m_x,
	float m_y,
	float m_z,
	float m_speed,
	float m_xv,
	float m_yv,
	float m_zv,
	float m_xr,
	float m_yr,
	float m_zr,
	float m_xd,
	float m_yd,
	float m_zd,
	float const*m_susp_pos,
	float const*m_susp_vel,
	float const*m_wheel_speed,
	float m_throttle,
	float m_steer,
	float m_brake,
	float m_clutch,
	float m_gear,
	float m_gforce_lat,
	float m_gforce_lon,
	float m_lap,
	float m_engineRate,
	float m_sli_pro_native_support,
	float m_car_position,
	float m_kers_level,
	float m_kers_max_level,
	float m_drs,
	float m_traction_control,
	float m_anti_lock_brakes,
	float m_fuel_in_tank,
	float m_fuel_capacity,
	float m_in_pits,
	float m_sector,
	float m_sector1_time,
	float m_sector2_time,
	float const*m_brakes_temp,
	float const*m_tyres_pressure,
	float m_team_info,
	float m_total_laps,
	float m_track_size,
	float m_last_lap_time,
	float m_max_rpm,
	float m_idle_rpm,
	float m_max_gears,
	float m_sessionType,
	float m_drsAllowed,
	float m_track_number,
	float m_vehicleFIAFlags,
	float m_era,
	float m_engine_temperature,
	float m_gforce_vert,
	float m_ang_vel_x,
	float m_ang_vel_y,
	float m_ang_vel_z,
	char const*m_tyres_temperature,
	char const*m_tyres_wear,
	char m_tyre_compound,
	char m_front_brake_bias,
	char m_fuel_mix,
	char m_currentLapInvalid,
	char const*m_tyres_damage,
	char m_front_left_wing_damage,
	char m_front_right_wing_damage,
	char m_rear_wing_damage,
	char m_engine_damage,
	char m_gear_box_damage,
	char m_exhaust_damage,
	char m_pit_limiter_status,
	char m_pit_speed_limit,
	float m_session_time_left,
	char m_rev_lights_percent,
	char m_is_spectating,
	char m_spectator_car_index,
	char m_num_cars,
	char m_player_car_index,
	CarUDPData const*m_car_data,
	float m_yaw,
	float m_pitch,
	float m_roll,
	float m_x_local_velocity,
	float m_y_local_velocity,
	float m_z_local_velocity,
	float const*m_susp_acceleration,
	float m_ang_acc_x,
	float m_ang_acc_y,
	float m_ang_acc_z)
{
	UDPPacket *_p = deepf1_gsoap::soap_new_UDPPacket(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->UDPPacket::m_time = m_time;
		_p->UDPPacket::m_lapTime = m_lapTime;
		_p->UDPPacket::m_lapDistance = m_lapDistance;
		_p->UDPPacket::m_totalDistance = m_totalDistance;
		_p->UDPPacket::m_x = m_x;
		_p->UDPPacket::m_y = m_y;
		_p->UDPPacket::m_z = m_z;
		_p->UDPPacket::m_speed = m_speed;
		_p->UDPPacket::m_xv = m_xv;
		_p->UDPPacket::m_yv = m_yv;
		_p->UDPPacket::m_zv = m_zv;
		_p->UDPPacket::m_xr = m_xr;
		_p->UDPPacket::m_yr = m_yr;
		_p->UDPPacket::m_zr = m_zr;
		_p->UDPPacket::m_xd = m_xd;
		_p->UDPPacket::m_yd = m_yd;
		_p->UDPPacket::m_zd = m_zd;
		for (int i = 0; i < 4; i++) _p->UDPPacket::m_susp_pos[i] = m_susp_pos[i];
		for (int i = 0; i < 4; i++) _p->UDPPacket::m_susp_vel[i] = m_susp_vel[i];
		for (int i = 0; i < 4; i++) _p->UDPPacket::m_wheel_speed[i] = m_wheel_speed[i];
		_p->UDPPacket::m_throttle = m_throttle;
		_p->UDPPacket::m_steer = m_steer;
		_p->UDPPacket::m_brake = m_brake;
		_p->UDPPacket::m_clutch = m_clutch;
		_p->UDPPacket::m_gear = m_gear;
		_p->UDPPacket::m_gforce_lat = m_gforce_lat;
		_p->UDPPacket::m_gforce_lon = m_gforce_lon;
		_p->UDPPacket::m_lap = m_lap;
		_p->UDPPacket::m_engineRate = m_engineRate;
		_p->UDPPacket::m_sli_pro_native_support = m_sli_pro_native_support;
		_p->UDPPacket::m_car_position = m_car_position;
		_p->UDPPacket::m_kers_level = m_kers_level;
		_p->UDPPacket::m_kers_max_level = m_kers_max_level;
		_p->UDPPacket::m_drs = m_drs;
		_p->UDPPacket::m_traction_control = m_traction_control;
		_p->UDPPacket::m_anti_lock_brakes = m_anti_lock_brakes;
		_p->UDPPacket::m_fuel_in_tank = m_fuel_in_tank;
		_p->UDPPacket::m_fuel_capacity = m_fuel_capacity;
		_p->UDPPacket::m_in_pits = m_in_pits;
		_p->UDPPacket::m_sector = m_sector;
		_p->UDPPacket::m_sector1_time = m_sector1_time;
		_p->UDPPacket::m_sector2_time = m_sector2_time;
		for (int i = 0; i < 4; i++) _p->UDPPacket::m_brakes_temp[i] = m_brakes_temp[i];
		for (int i = 0; i < 4; i++) _p->UDPPacket::m_tyres_pressure[i] = m_tyres_pressure[i];
		_p->UDPPacket::m_team_info = m_team_info;
		_p->UDPPacket::m_total_laps = m_total_laps;
		_p->UDPPacket::m_track_size = m_track_size;
		_p->UDPPacket::m_last_lap_time = m_last_lap_time;
		_p->UDPPacket::m_max_rpm = m_max_rpm;
		_p->UDPPacket::m_idle_rpm = m_idle_rpm;
		_p->UDPPacket::m_max_gears = m_max_gears;
		_p->UDPPacket::m_sessionType = m_sessionType;
		_p->UDPPacket::m_drsAllowed = m_drsAllowed;
		_p->UDPPacket::m_track_number = m_track_number;
		_p->UDPPacket::m_vehicleFIAFlags = m_vehicleFIAFlags;
		_p->UDPPacket::m_era = m_era;
		_p->UDPPacket::m_engine_temperature = m_engine_temperature;
		_p->UDPPacket::m_gforce_vert = m_gforce_vert;
		_p->UDPPacket::m_ang_vel_x = m_ang_vel_x;
		_p->UDPPacket::m_ang_vel_y = m_ang_vel_y;
		_p->UDPPacket::m_ang_vel_z = m_ang_vel_z;
		for (int i = 0; i < 4; i++) _p->UDPPacket::m_tyres_temperature[i] = m_tyres_temperature[i];
		for (int i = 0; i < 4; i++) _p->UDPPacket::m_tyres_wear[i] = m_tyres_wear[i];
		_p->UDPPacket::m_tyre_compound = m_tyre_compound;
		_p->UDPPacket::m_front_brake_bias = m_front_brake_bias;
		_p->UDPPacket::m_fuel_mix = m_fuel_mix;
		_p->UDPPacket::m_currentLapInvalid = m_currentLapInvalid;
		for (int i = 0; i < 4; i++) _p->UDPPacket::m_tyres_damage[i] = m_tyres_damage[i];
		_p->UDPPacket::m_front_left_wing_damage = m_front_left_wing_damage;
		_p->UDPPacket::m_front_right_wing_damage = m_front_right_wing_damage;
		_p->UDPPacket::m_rear_wing_damage = m_rear_wing_damage;
		_p->UDPPacket::m_engine_damage = m_engine_damage;
		_p->UDPPacket::m_gear_box_damage = m_gear_box_damage;
		_p->UDPPacket::m_exhaust_damage = m_exhaust_damage;
		_p->UDPPacket::m_pit_limiter_status = m_pit_limiter_status;
		_p->UDPPacket::m_pit_speed_limit = m_pit_speed_limit;
		_p->UDPPacket::m_session_time_left = m_session_time_left;
		_p->UDPPacket::m_rev_lights_percent = m_rev_lights_percent;
		_p->UDPPacket::m_is_spectating = m_is_spectating;
		_p->UDPPacket::m_spectator_car_index = m_spectator_car_index;
		_p->UDPPacket::m_num_cars = m_num_cars;
		_p->UDPPacket::m_player_car_index = m_player_car_index;
		for (int i = 0; i < 20; i++) _p->UDPPacket::m_car_data[i] = m_car_data[i];
		_p->UDPPacket::m_yaw = m_yaw;
		_p->UDPPacket::m_pitch = m_pitch;
		_p->UDPPacket::m_roll = m_roll;
		_p->UDPPacket::m_x_local_velocity = m_x_local_velocity;
		_p->UDPPacket::m_y_local_velocity = m_y_local_velocity;
		_p->UDPPacket::m_z_local_velocity = m_z_local_velocity;
		for (int i = 0; i < 4; i++) _p->UDPPacket::m_susp_acceleration[i] = m_susp_acceleration[i];
		_p->UDPPacket::m_ang_acc_x = m_ang_acc_x;
		_p->UDPPacket::m_ang_acc_y = m_ang_acc_y;
		_p->UDPPacket::m_ang_acc_z = m_ang_acc_z;
	}
	return _p;
}

inline int soap_write_UDPPacket(struct soap *soap, UDPPacket const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "UDPPacket", p->soap_type() == SOAP_TYPE_deepf1_gsoap_UDPPacket ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_UDPPacket(struct soap *soap, const char *URL, UDPPacket const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "UDPPacket", p->soap_type() == SOAP_TYPE_deepf1_gsoap_UDPPacket ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_UDPPacket(struct soap *soap, const char *URL, UDPPacket const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "UDPPacket", p->soap_type() == SOAP_TYPE_deepf1_gsoap_UDPPacket ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 UDPPacket * SOAP_FMAC4 soap_get_UDPPacket(struct soap*, UDPPacket *, const char*, const char*);

inline int soap_read_UDPPacket(struct soap *soap, UDPPacket *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || deepf1_gsoap::soap_get_UDPPacket(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_UDPPacket(struct soap *soap, const char *URL, UDPPacket *p)
{
	if (soap_GET(soap, URL, NULL) || deepf1_gsoap::soap_read_UDPPacket(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_UDPPacket(struct soap *soap, UDPPacket *p)
{
	if (deepf1_gsoap::soap_read_UDPPacket(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_deepf1_gsoap_CarUDPData_DEFINED
#define SOAP_TYPE_deepf1_gsoap_CarUDPData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_CarUDPData(struct soap*, const char*, int, const CarUDPData *, const char*);
SOAP_FMAC3 CarUDPData * SOAP_FMAC4 soap_in_CarUDPData(struct soap*, const char*, CarUDPData *, const char*);
SOAP_FMAC1 CarUDPData * SOAP_FMAC2 soap_instantiate_CarUDPData(struct soap*, int, const char*, const char*, size_t*);

inline CarUDPData * soap_new_CarUDPData(struct soap *soap, int n = -1)
{
	return soap_instantiate_CarUDPData(soap, n, NULL, NULL, NULL);
}

inline CarUDPData * soap_new_req_CarUDPData(
	struct soap *soap,
	float const*m_worldPosition,
	float m_lastLapTime,
	float m_currentLapTime,
	float m_bestLapTime,
	float m_sector1Time,
	float m_sector2Time,
	float m_lapDistance,
	char m_driverId,
	char m_teamId,
	char m_carPosition,
	char m_currentLapNum,
	char m_tyreCompound,
	char m_inPits,
	char m_sector,
	char m_currentLapInvalid,
	char m_penalties)
{
	CarUDPData *_p = deepf1_gsoap::soap_new_CarUDPData(soap);
	if (_p)
	{	_p->soap_default(soap);
		for (int i = 0; i < 3; i++) _p->CarUDPData::m_worldPosition[i] = m_worldPosition[i];
		_p->CarUDPData::m_lastLapTime = m_lastLapTime;
		_p->CarUDPData::m_currentLapTime = m_currentLapTime;
		_p->CarUDPData::m_bestLapTime = m_bestLapTime;
		_p->CarUDPData::m_sector1Time = m_sector1Time;
		_p->CarUDPData::m_sector2Time = m_sector2Time;
		_p->CarUDPData::m_lapDistance = m_lapDistance;
		_p->CarUDPData::m_driverId = m_driverId;
		_p->CarUDPData::m_teamId = m_teamId;
		_p->CarUDPData::m_carPosition = m_carPosition;
		_p->CarUDPData::m_currentLapNum = m_currentLapNum;
		_p->CarUDPData::m_tyreCompound = m_tyreCompound;
		_p->CarUDPData::m_inPits = m_inPits;
		_p->CarUDPData::m_sector = m_sector;
		_p->CarUDPData::m_currentLapInvalid = m_currentLapInvalid;
		_p->CarUDPData::m_penalties = m_penalties;
	}
	return _p;
}

inline CarUDPData * soap_new_set_CarUDPData(
	struct soap *soap,
	float const*m_worldPosition,
	float m_lastLapTime,
	float m_currentLapTime,
	float m_bestLapTime,
	float m_sector1Time,
	float m_sector2Time,
	float m_lapDistance,
	char m_driverId,
	char m_teamId,
	char m_carPosition,
	char m_currentLapNum,
	char m_tyreCompound,
	char m_inPits,
	char m_sector,
	char m_currentLapInvalid,
	char m_penalties)
{
	CarUDPData *_p = deepf1_gsoap::soap_new_CarUDPData(soap);
	if (_p)
	{	_p->soap_default(soap);
		for (int i = 0; i < 3; i++) _p->CarUDPData::m_worldPosition[i] = m_worldPosition[i];
		_p->CarUDPData::m_lastLapTime = m_lastLapTime;
		_p->CarUDPData::m_currentLapTime = m_currentLapTime;
		_p->CarUDPData::m_bestLapTime = m_bestLapTime;
		_p->CarUDPData::m_sector1Time = m_sector1Time;
		_p->CarUDPData::m_sector2Time = m_sector2Time;
		_p->CarUDPData::m_lapDistance = m_lapDistance;
		_p->CarUDPData::m_driverId = m_driverId;
		_p->CarUDPData::m_teamId = m_teamId;
		_p->CarUDPData::m_carPosition = m_carPosition;
		_p->CarUDPData::m_currentLapNum = m_currentLapNum;
		_p->CarUDPData::m_tyreCompound = m_tyreCompound;
		_p->CarUDPData::m_inPits = m_inPits;
		_p->CarUDPData::m_sector = m_sector;
		_p->CarUDPData::m_currentLapInvalid = m_currentLapInvalid;
		_p->CarUDPData::m_penalties = m_penalties;
	}
	return _p;
}

inline int soap_write_CarUDPData(struct soap *soap, CarUDPData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "CarUDPData", p->soap_type() == SOAP_TYPE_deepf1_gsoap_CarUDPData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_CarUDPData(struct soap *soap, const char *URL, CarUDPData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "CarUDPData", p->soap_type() == SOAP_TYPE_deepf1_gsoap_CarUDPData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_CarUDPData(struct soap *soap, const char *URL, CarUDPData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "CarUDPData", p->soap_type() == SOAP_TYPE_deepf1_gsoap_CarUDPData ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 CarUDPData * SOAP_FMAC4 soap_get_CarUDPData(struct soap*, CarUDPData *, const char*, const char*);

inline int soap_read_CarUDPData(struct soap *soap, CarUDPData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || deepf1_gsoap::soap_get_CarUDPData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_CarUDPData(struct soap *soap, const char *URL, CarUDPData *p)
{
	if (soap_GET(soap, URL, NULL) || deepf1_gsoap::soap_read_CarUDPData(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_CarUDPData(struct soap *soap, CarUDPData *p)
{
	if (deepf1_gsoap::soap_read_CarUDPData(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = deepf1_gsoap::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	deepf1_gsoap::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = deepf1_gsoap::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	deepf1_gsoap::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (deepf1_gsoap::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || deepf1_gsoap::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (deepf1_gsoap::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || deepf1_gsoap::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (deepf1_gsoap::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || deepf1_gsoap::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	deepf1_gsoap::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || deepf1_gsoap::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || deepf1_gsoap::soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (deepf1_gsoap::soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = deepf1_gsoap::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	deepf1_gsoap::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = deepf1_gsoap::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	deepf1_gsoap::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (deepf1_gsoap::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || deepf1_gsoap::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (deepf1_gsoap::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || deepf1_gsoap::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (deepf1_gsoap::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || deepf1_gsoap::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	deepf1_gsoap::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || deepf1_gsoap::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || deepf1_gsoap::soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (deepf1_gsoap::soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = deepf1_gsoap::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	deepf1_gsoap::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = deepf1_gsoap::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	deepf1_gsoap::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (deepf1_gsoap::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || deepf1_gsoap::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (deepf1_gsoap::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || deepf1_gsoap::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (deepf1_gsoap::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || deepf1_gsoap::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	deepf1_gsoap::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || deepf1_gsoap::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || deepf1_gsoap::soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (deepf1_gsoap::soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = deepf1_gsoap::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	deepf1_gsoap::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = deepf1_gsoap::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	deepf1_gsoap::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (deepf1_gsoap::soap_serialize_SOAP_ENV__Code(soap, p), 0) || deepf1_gsoap::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (deepf1_gsoap::soap_serialize_SOAP_ENV__Code(soap, p), 0) || deepf1_gsoap::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (deepf1_gsoap::soap_serialize_SOAP_ENV__Code(soap, p), 0) || deepf1_gsoap::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	deepf1_gsoap::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || deepf1_gsoap::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || deepf1_gsoap::soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (deepf1_gsoap::soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = deepf1_gsoap::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	deepf1_gsoap::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = deepf1_gsoap::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	deepf1_gsoap::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (deepf1_gsoap::soap_serialize_SOAP_ENV__Header(soap, p), 0) || deepf1_gsoap::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (deepf1_gsoap::soap_serialize_SOAP_ENV__Header(soap, p), 0) || deepf1_gsoap::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (deepf1_gsoap::soap_serialize_SOAP_ENV__Header(soap, p), 0) || deepf1_gsoap::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	deepf1_gsoap::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || deepf1_gsoap::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || deepf1_gsoap::soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (deepf1_gsoap::soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_deepf1_gsoap_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_deepf1_gsoap_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_deepf1_gsoap_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_deepf1_gsoap_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_deepf1_gsoap_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_deepf1_gsoap_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_deepf1_gsoap__QName_DEFINED
#define SOAP_TYPE_deepf1_gsoap__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || deepf1_gsoap::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || deepf1_gsoap::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || deepf1_gsoap::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || deepf1_gsoap::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || deepf1_gsoap::soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (deepf1_gsoap::soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_deepf1_gsoap__XML_DEFINED
#define SOAP_TYPE_deepf1_gsoap__XML_DEFINED
#endif

#ifndef SOAP_TYPE_deepf1_gsoap_string_DEFINED
#define SOAP_TYPE_deepf1_gsoap_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || deepf1_gsoap::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || deepf1_gsoap::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || deepf1_gsoap::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || deepf1_gsoap::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || deepf1_gsoap::soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (deepf1_gsoap::soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_deepf1_gsoap_Array20OfCarUDPData_DEFINED
#define SOAP_TYPE_deepf1_gsoap_Array20OfCarUDPData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Array20OfCarUDPData(struct soap*, CarUDPData[20]);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Array20OfCarUDPData(struct soap*, CarUDPData const[20]);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Array20OfCarUDPData(struct soap*, const char*, int, CarUDPData const[20], const char*);
SOAP_FMAC3 CarUDPData * SOAP_FMAC4 soap_in_Array20OfCarUDPData(struct soap*, const char*, CarUDPData[20], const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_Array20OfCarUDPData(struct soap*, CarUDPData const[20], const char*, const char*);
SOAP_FMAC3 CarUDPData * SOAP_FMAC4 soap_get_Array20OfCarUDPData(struct soap*, CarUDPData[20], const char*, const char*);
#endif

#ifndef SOAP_TYPE_deepf1_gsoap_Array4Ofbyte_DEFINED
#define SOAP_TYPE_deepf1_gsoap_Array4Ofbyte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Array4Ofbyte(struct soap*, char[4]);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Array4Ofbyte(struct soap*, char const[4]);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Array4Ofbyte(struct soap*, const char*, int, char const[4], const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_Array4Ofbyte(struct soap*, const char*, char[4], const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_Array4Ofbyte(struct soap*, char const[4], const char*, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_Array4Ofbyte(struct soap*, char[4], const char*, const char*);
#endif

#ifndef SOAP_TYPE_deepf1_gsoap_Array4Offloat_DEFINED
#define SOAP_TYPE_deepf1_gsoap_Array4Offloat_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Array4Offloat(struct soap*, float[4]);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Array4Offloat(struct soap*, float const[4]);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Array4Offloat(struct soap*, const char*, int, float const[4], const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_Array4Offloat(struct soap*, const char*, float[4], const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_Array4Offloat(struct soap*, float const[4], const char*, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_get_Array4Offloat(struct soap*, float[4], const char*, const char*);
#endif

#ifndef SOAP_TYPE_deepf1_gsoap_Array3Offloat_DEFINED
#define SOAP_TYPE_deepf1_gsoap_Array3Offloat_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Array3Offloat(struct soap*, float[3]);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Array3Offloat(struct soap*, float const[3]);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Array3Offloat(struct soap*, const char*, int, float const[3], const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_Array3Offloat(struct soap*, const char*, float[3], const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_Array3Offloat(struct soap*, float const[3], const char*, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_get_Array3Offloat(struct soap*, float[3], const char*, const char*);
#endif

} // namespace deepf1_gsoap


#endif

/* End of deepf1_gsoapH.h */
