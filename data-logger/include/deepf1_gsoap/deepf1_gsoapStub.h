/* deepf1_gsoapStub.h
   Generated by gSOAP 2.8.63 for gsoap_templates.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/


#ifndef deepf1_gsoapStub_H
#define deepf1_gsoapStub_H
#ifndef WITH_NOGLOBAL
#define WITH_NOGLOBAL
#endif
#include "deepf1_gsoap/stdsoap2.h"
#if GSOAP_VERSION != 20863
# error "GSOAP VERSION 20863 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


namespace deepf1_gsoap {

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class CarUDPData;	/* gsoap_templates.h:2 */
class UDPPacket;	/* gsoap_templates.h:37 */
class ground_truth_sample;	/* gsoap_templates.h:232 */

/* gsoap_templates.h:2 */
#ifndef SOAP_TYPE_deepf1_gsoap_CarUDPData
#define SOAP_TYPE_deepf1_gsoap_CarUDPData (-7)
/* complex XSD type 'CarUDPData': */
class SOAP_CMAC CarUDPData {
      public:
        /// Required element 'm-worldPosition' of XSD type 'Array3Offloat'
        float m_worldPosition[3];
        /// Required element 'm-lastLapTime' of XSD type 'xsd:float'
        float m_lastLapTime;
        /// Required element 'm-currentLapTime' of XSD type 'xsd:float'
        float m_currentLapTime;
        /// Required element 'm-bestLapTime' of XSD type 'xsd:float'
        float m_bestLapTime;
        /// Required element 'm-sector1Time' of XSD type 'xsd:float'
        float m_sector1Time;
        /// Required element 'm-sector2Time' of XSD type 'xsd:float'
        float m_sector2Time;
        /// Required element 'm-lapDistance' of XSD type 'xsd:float'
        float m_lapDistance;
        /// Required element 'm-driverId' of XSD type 'xsd:byte'
        char m_driverId;
        /// Required element 'm-teamId' of XSD type 'xsd:byte'
        char m_teamId;
        /// Required element 'm-carPosition' of XSD type 'xsd:byte'
        char m_carPosition;
        /// Required element 'm-currentLapNum' of XSD type 'xsd:byte'
        char m_currentLapNum;
        /// Required element 'm-tyreCompound' of XSD type 'xsd:byte'
        char m_tyreCompound;
        /// Required element 'm-inPits' of XSD type 'xsd:byte'
        char m_inPits;
        /// Required element 'm-sector' of XSD type 'xsd:byte'
        char m_sector;
        /// Required element 'm-currentLapInvalid' of XSD type 'xsd:byte'
        char m_currentLapInvalid;
        /// Required element 'm-penalties' of XSD type 'xsd:byte'
        char m_penalties;
      public:
        /// Return unique type id SOAP_TYPE_deepf1_gsoap_CarUDPData
        virtual long soap_type(void) const { return SOAP_TYPE_deepf1_gsoap_CarUDPData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type CarUDPData, default initialized and not managed by a soap context
        virtual CarUDPData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(CarUDPData); }
      public:
        /// Constructor with initializations
        CarUDPData() : m_worldPosition(), m_lastLapTime(), m_currentLapTime(), m_bestLapTime(), m_sector1Time(), m_sector2Time(), m_lapDistance(), m_driverId(), m_teamId(), m_carPosition(), m_currentLapNum(), m_tyreCompound(), m_inPits(), m_sector(), m_currentLapInvalid(), m_penalties() { }
        virtual ~CarUDPData() { }
        /// Friend allocator used by soap_new_CarUDPData(struct soap*, int)
        friend SOAP_FMAC1 CarUDPData * SOAP_FMAC2 soap_instantiate_CarUDPData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* gsoap_templates.h:37 */
#ifndef SOAP_TYPE_deepf1_gsoap_UDPPacket
#define SOAP_TYPE_deepf1_gsoap_UDPPacket (-10)
/* complex XSD type 'UDPPacket': */
class SOAP_CMAC UDPPacket {
      public:
        /// Required element 'm-time' of XSD type 'xsd:float'
        float m_time;
        /// Required element 'm-lapTime' of XSD type 'xsd:float'
        float m_lapTime;
        /// Required element 'm-lapDistance' of XSD type 'xsd:float'
        float m_lapDistance;
        /// Required element 'm-totalDistance' of XSD type 'xsd:float'
        float m_totalDistance;
        /// Required element 'm-x' of XSD type 'xsd:float'
        float m_x;
        /// Required element 'm-y' of XSD type 'xsd:float'
        float m_y;
        /// Required element 'm-z' of XSD type 'xsd:float'
        float m_z;
        /// Required element 'm-speed' of XSD type 'xsd:float'
        float m_speed;
        /// Required element 'm-xv' of XSD type 'xsd:float'
        float m_xv;
        /// Required element 'm-yv' of XSD type 'xsd:float'
        float m_yv;
        /// Required element 'm-zv' of XSD type 'xsd:float'
        float m_zv;
        /// Required element 'm-xr' of XSD type 'xsd:float'
        float m_xr;
        /// Required element 'm-yr' of XSD type 'xsd:float'
        float m_yr;
        /// Required element 'm-zr' of XSD type 'xsd:float'
        float m_zr;
        /// Required element 'm-xd' of XSD type 'xsd:float'
        float m_xd;
        /// Required element 'm-yd' of XSD type 'xsd:float'
        float m_yd;
        /// Required element 'm-zd' of XSD type 'xsd:float'
        float m_zd;
        /// Required element 'm-susp-pos' of XSD type 'Array4Offloat'
        float m_susp_pos[4];
        /// Required element 'm-susp-vel' of XSD type 'Array4Offloat'
        float m_susp_vel[4];
        /// Required element 'm-wheel-speed' of XSD type 'Array4Offloat'
        float m_wheel_speed[4];
        /// Required element 'm-throttle' of XSD type 'xsd:float'
        float m_throttle;
        /// Required element 'm-steer' of XSD type 'xsd:float'
        float m_steer;
        /// Required element 'm-brake' of XSD type 'xsd:float'
        float m_brake;
        /// Required element 'm-clutch' of XSD type 'xsd:float'
        float m_clutch;
        /// Required element 'm-gear' of XSD type 'xsd:float'
        float m_gear;
        /// Required element 'm-gforce-lat' of XSD type 'xsd:float'
        float m_gforce_lat;
        /// Required element 'm-gforce-lon' of XSD type 'xsd:float'
        float m_gforce_lon;
        /// Required element 'm-lap' of XSD type 'xsd:float'
        float m_lap;
        /// Required element 'm-engineRate' of XSD type 'xsd:float'
        float m_engineRate;
        /// Required element 'm-sli-pro-native-support' of XSD type 'xsd:float'
        float m_sli_pro_native_support;
        /// Required element 'm-car-position' of XSD type 'xsd:float'
        float m_car_position;
        /// Required element 'm-kers-level' of XSD type 'xsd:float'
        float m_kers_level;
        /// Required element 'm-kers-max-level' of XSD type 'xsd:float'
        float m_kers_max_level;
        /// Required element 'm-drs' of XSD type 'xsd:float'
        float m_drs;
        /// Required element 'm-traction-control' of XSD type 'xsd:float'
        float m_traction_control;
        /// Required element 'm-anti-lock-brakes' of XSD type 'xsd:float'
        float m_anti_lock_brakes;
        /// Required element 'm-fuel-in-tank' of XSD type 'xsd:float'
        float m_fuel_in_tank;
        /// Required element 'm-fuel-capacity' of XSD type 'xsd:float'
        float m_fuel_capacity;
        /// Required element 'm-in-pits' of XSD type 'xsd:float'
        float m_in_pits;
        /// Required element 'm-sector' of XSD type 'xsd:float'
        float m_sector;
        /// Required element 'm-sector1-time' of XSD type 'xsd:float'
        float m_sector1_time;
        /// Required element 'm-sector2-time' of XSD type 'xsd:float'
        float m_sector2_time;
        /// Required element 'm-brakes-temp' of XSD type 'Array4Offloat'
        float m_brakes_temp[4];
        /// Required element 'm-tyres-pressure' of XSD type 'Array4Offloat'
        float m_tyres_pressure[4];
        /// Required element 'm-team-info' of XSD type 'xsd:float'
        float m_team_info;
        /// Required element 'm-total-laps' of XSD type 'xsd:float'
        float m_total_laps;
        /// Required element 'm-track-size' of XSD type 'xsd:float'
        float m_track_size;
        /// Required element 'm-last-lap-time' of XSD type 'xsd:float'
        float m_last_lap_time;
        /// Required element 'm-max-rpm' of XSD type 'xsd:float'
        float m_max_rpm;
        /// Required element 'm-idle-rpm' of XSD type 'xsd:float'
        float m_idle_rpm;
        /// Required element 'm-max-gears' of XSD type 'xsd:float'
        float m_max_gears;
        /// Required element 'm-sessionType' of XSD type 'xsd:float'
        float m_sessionType;
        /// Required element 'm-drsAllowed' of XSD type 'xsd:float'
        float m_drsAllowed;
        /// Required element 'm-track-number' of XSD type 'xsd:float'
        float m_track_number;
        /// Required element 'm-vehicleFIAFlags' of XSD type 'xsd:float'
        float m_vehicleFIAFlags;
        /// Required element 'm-era' of XSD type 'xsd:float'
        float m_era;
        /// Required element 'm-engine-temperature' of XSD type 'xsd:float'
        float m_engine_temperature;
        /// Required element 'm-gforce-vert' of XSD type 'xsd:float'
        float m_gforce_vert;
        /// Required element 'm-ang-vel-x' of XSD type 'xsd:float'
        float m_ang_vel_x;
        /// Required element 'm-ang-vel-y' of XSD type 'xsd:float'
        float m_ang_vel_y;
        /// Required element 'm-ang-vel-z' of XSD type 'xsd:float'
        float m_ang_vel_z;
        /// Required element 'm-tyres-temperature' of XSD type 'Array4Ofbyte'
        char m_tyres_temperature[4];
        /// Required element 'm-tyres-wear' of XSD type 'Array4Ofbyte'
        char m_tyres_wear[4];
        /// Required element 'm-tyre-compound' of XSD type 'xsd:byte'
        char m_tyre_compound;
        /// Required element 'm-front-brake-bias' of XSD type 'xsd:byte'
        char m_front_brake_bias;
        /// Required element 'm-fuel-mix' of XSD type 'xsd:byte'
        char m_fuel_mix;
        /// Required element 'm-currentLapInvalid' of XSD type 'xsd:byte'
        char m_currentLapInvalid;
        /// Required element 'm-tyres-damage' of XSD type 'Array4Ofbyte'
        char m_tyres_damage[4];
        /// Required element 'm-front-left-wing-damage' of XSD type 'xsd:byte'
        char m_front_left_wing_damage;
        /// Required element 'm-front-right-wing-damage' of XSD type 'xsd:byte'
        char m_front_right_wing_damage;
        /// Required element 'm-rear-wing-damage' of XSD type 'xsd:byte'
        char m_rear_wing_damage;
        /// Required element 'm-engine-damage' of XSD type 'xsd:byte'
        char m_engine_damage;
        /// Required element 'm-gear-box-damage' of XSD type 'xsd:byte'
        char m_gear_box_damage;
        /// Required element 'm-exhaust-damage' of XSD type 'xsd:byte'
        char m_exhaust_damage;
        /// Required element 'm-pit-limiter-status' of XSD type 'xsd:byte'
        char m_pit_limiter_status;
        /// Required element 'm-pit-speed-limit' of XSD type 'xsd:byte'
        char m_pit_speed_limit;
        /// Required element 'm-session-time-left' of XSD type 'xsd:float'
        float m_session_time_left;
        /// Required element 'm-rev-lights-percent' of XSD type 'xsd:byte'
        char m_rev_lights_percent;
        /// Required element 'm-is-spectating' of XSD type 'xsd:byte'
        char m_is_spectating;
        /// Required element 'm-spectator-car-index' of XSD type 'xsd:byte'
        char m_spectator_car_index;
        /// Required element 'm-num-cars' of XSD type 'xsd:byte'
        char m_num_cars;
        /// Required element 'm-player-car-index' of XSD type 'xsd:byte'
        char m_player_car_index;
        /// Required element 'm-car-data' of XSD type 'Array20OfCarUDPData'
        CarUDPData m_car_data[20];
        /// Required element 'm-yaw' of XSD type 'xsd:float'
        float m_yaw;
        /// Required element 'm-pitch' of XSD type 'xsd:float'
        float m_pitch;
        /// Required element 'm-roll' of XSD type 'xsd:float'
        float m_roll;
        /// Required element 'm-x-local-velocity' of XSD type 'xsd:float'
        float m_x_local_velocity;
        /// Required element 'm-y-local-velocity' of XSD type 'xsd:float'
        float m_y_local_velocity;
        /// Required element 'm-z-local-velocity' of XSD type 'xsd:float'
        float m_z_local_velocity;
        /// Required element 'm-susp-acceleration' of XSD type 'Array4Offloat'
        float m_susp_acceleration[4];
        /// Required element 'm-ang-acc-x' of XSD type 'xsd:float'
        float m_ang_acc_x;
        /// Required element 'm-ang-acc-y' of XSD type 'xsd:float'
        float m_ang_acc_y;
        /// Required element 'm-ang-acc-z' of XSD type 'xsd:float'
        float m_ang_acc_z;
      public:
        /// Return unique type id SOAP_TYPE_deepf1_gsoap_UDPPacket
        virtual long soap_type(void) const { return SOAP_TYPE_deepf1_gsoap_UDPPacket; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type UDPPacket, default initialized and not managed by a soap context
        virtual UDPPacket *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(UDPPacket); }
      public:
        /// Constructor with initializations
        UDPPacket() : m_time(), m_lapTime(), m_lapDistance(), m_totalDistance(), m_x(), m_y(), m_z(), m_speed(), m_xv(), m_yv(), m_zv(), m_xr(), m_yr(), m_zr(), m_xd(), m_yd(), m_zd(), m_susp_pos(), m_susp_vel(), m_wheel_speed(), m_throttle(), m_steer(), m_brake(), m_clutch(), m_gear(), m_gforce_lat(), m_gforce_lon(), m_lap(), m_engineRate(), m_sli_pro_native_support(), m_car_position(), m_kers_level(), m_kers_max_level(), m_drs(), m_traction_control(), m_anti_lock_brakes(), m_fuel_in_tank(), m_fuel_capacity(), m_in_pits(), m_sector(), m_sector1_time(), m_sector2_time(), m_brakes_temp(), m_tyres_pressure(), m_team_info(), m_total_laps(), m_track_size(), m_last_lap_time(), m_max_rpm(), m_idle_rpm(), m_max_gears(), m_sessionType(), m_drsAllowed(), m_track_number(), m_vehicleFIAFlags(), m_era(), m_engine_temperature(), m_gforce_vert(), m_ang_vel_x(), m_ang_vel_y(), m_ang_vel_z(), m_tyres_temperature(), m_tyres_wear(), m_tyre_compound(), m_front_brake_bias(), m_fuel_mix(), m_currentLapInvalid(), m_tyres_damage(), m_front_left_wing_damage(), m_front_right_wing_damage(), m_rear_wing_damage(), m_engine_damage(), m_gear_box_damage(), m_exhaust_damage(), m_pit_limiter_status(), m_pit_speed_limit(), m_session_time_left(), m_rev_lights_percent(), m_is_spectating(), m_spectator_car_index(), m_num_cars(), m_player_car_index(), m_car_data(), m_yaw(), m_pitch(), m_roll(), m_x_local_velocity(), m_y_local_velocity(), m_z_local_velocity(), m_susp_acceleration(), m_ang_acc_x(), m_ang_acc_y(), m_ang_acc_z() { }
        virtual ~UDPPacket() { }
        /// Friend allocator used by soap_new_UDPPacket(struct soap*, int)
        friend SOAP_FMAC1 UDPPacket * SOAP_FMAC2 soap_instantiate_UDPPacket(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* gsoap_templates.h:232 */
#ifndef SOAP_TYPE_deepf1_gsoap_ground_truth_sample
#define SOAP_TYPE_deepf1_gsoap_ground_truth_sample (-14)
/* complex XSD type 'ground-truth-sample': */
class SOAP_CMAC ground_truth_sample {
      public:
        /// Required element 'sample' of XSD type 'UDPPacket'
        UDPPacket sample;
        /// Required element 'image-file' of XSD type 'xsd:string'
        std::string image_file;
        /// Required element 'timestamp' of XSD type 'xsd:long'
        LONG64 timestamp;
      public:
        /// Return unique type id SOAP_TYPE_deepf1_gsoap_ground_truth_sample
        virtual long soap_type(void) const { return SOAP_TYPE_deepf1_gsoap_ground_truth_sample; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ground_truth_sample, default initialized and not managed by a soap context
        virtual ground_truth_sample *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ground_truth_sample); }
      public:
        /// Constructor with initializations
        ground_truth_sample() : sample(), image_file(), timestamp() { }
        virtual ~ground_truth_sample() { }
        /// Friend allocator used by soap_new_ground_truth_sample(struct soap*, int)
        friend SOAP_FMAC1 ground_truth_sample * SOAP_FMAC2 soap_instantiate_ground_truth_sample(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* gsoap_templates.h:239 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Header
#define SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Header (-929652736)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* gsoap_templates.h:239 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Code
#define SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Code (-929652737)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XSD type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* gsoap_templates.h:239 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Detail
#define SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Detail (-929652739)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_T assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : __any(), __type(), fault() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* gsoap_templates.h:239 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Reason
#define SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Reason (-929652742)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XSD type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* gsoap_templates.h:239 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Fault
#define SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Fault (-929652743)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XSD type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XSD type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XSD type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XSD type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XSD type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XSD type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE_deepf1_gsoap__XML
#define SOAP_TYPE_deepf1_gsoap__XML (-5)

typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE_deepf1_gsoap__QName
#define SOAP_TYPE_deepf1_gsoap__QName (-6)

typedef char *_QName;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_deepf1_gsoap_byte
#define SOAP_TYPE_deepf1_gsoap_byte (-3)

#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_deepf1_gsoap_int
#define SOAP_TYPE_deepf1_gsoap_int (-1)

#endif

/* LONG64 has binding name 'LONG64' for type 'xsd:long' */
#ifndef SOAP_TYPE_deepf1_gsoap_LONG64
#define SOAP_TYPE_deepf1_gsoap_LONG64 (-16)

#endif

/* float has binding name 'float' for type 'xsd:float' */
#ifndef SOAP_TYPE_deepf1_gsoap_float
#define SOAP_TYPE_deepf1_gsoap_float (-8)

#endif

/* std::string has binding name 'std__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_deepf1_gsoap_std__string
#define SOAP_TYPE_deepf1_gsoap_std__string (-15)

#endif

/* ground_truth_sample has binding name 'ground_truth_sample' for type 'ground-truth-sample' */
#ifndef SOAP_TYPE_deepf1_gsoap_ground_truth_sample
#define SOAP_TYPE_deepf1_gsoap_ground_truth_sample (-14)

#endif

/* UDPPacket has binding name 'UDPPacket' for type 'UDPPacket' */
#ifndef SOAP_TYPE_deepf1_gsoap_UDPPacket
#define SOAP_TYPE_deepf1_gsoap_UDPPacket (-10)

#endif

/* CarUDPData has binding name 'CarUDPData' for type 'CarUDPData' */
#ifndef SOAP_TYPE_deepf1_gsoap_CarUDPData
#define SOAP_TYPE_deepf1_gsoap_CarUDPData (-7)

#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Fault
#define SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Fault (-929652743)

#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Reason
#define SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Reason (-929652742)

#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Detail
#define SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Detail (-929652739)

#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Code
#define SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Code (-929652737)

#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Header
#define SOAP_TYPE_deepf1_gsoap_SOAP_ENV__Header (-929652736)

#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_deepf1_gsoap_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_deepf1_gsoap_PointerToSOAP_ENV__Reason (-929652745)

#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_deepf1_gsoap_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_deepf1_gsoap_PointerToSOAP_ENV__Detail (-929652744)

#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_deepf1_gsoap_PointerToSOAP_ENV__Code
#define SOAP_TYPE_deepf1_gsoap_PointerToSOAP_ENV__Code (-929652738)

#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE_deepf1_gsoap__QName
#define SOAP_TYPE_deepf1_gsoap__QName (-6)

#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE_deepf1_gsoap__XML
#define SOAP_TYPE_deepf1_gsoap__XML (-5)

#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_deepf1_gsoap_string
#define SOAP_TYPE_deepf1_gsoap_string (-4)

#endif

/* CarUDPData[20] has binding name 'Array20OfCarUDPData' for type 'CarUDPData' */
#ifndef SOAP_TYPE_deepf1_gsoap_Array20OfCarUDPData
#define SOAP_TYPE_deepf1_gsoap_Array20OfCarUDPData (-13)

#endif

/* char[4] has binding name 'Array4Ofbyte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_deepf1_gsoap_Array4Ofbyte
#define SOAP_TYPE_deepf1_gsoap_Array4Ofbyte (-12)

#endif

/* float[4] has binding name 'Array4Offloat' for type 'xsd:float' */
#ifndef SOAP_TYPE_deepf1_gsoap_Array4Offloat
#define SOAP_TYPE_deepf1_gsoap_Array4Offloat (-11)

#endif

/* float[3] has binding name 'Array3Offloat' for type 'xsd:float' */
#ifndef SOAP_TYPE_deepf1_gsoap_Array3Offloat
#define SOAP_TYPE_deepf1_gsoap_Array3Offloat (-9)

#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


} // namespace deepf1_gsoap


#endif

/* End of deepf1_gsoapStub.h */
